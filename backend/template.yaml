AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Deck of Cards As A Service. SAM Template for the Deck of Cards As A Service Application Suite
Globals:
  Function:
    Timeout: 20

Parameters:
  AuthName:
    Type: String
    Description: Unique Auth Name for Cognito Resources
    Default: docaas-summit
  AcmCertificateArn:
    Type: String
    Description: The ARN of the SSL certificate to use for the CloudFront distribution.
    Default: arn:aws:acm:us-east-1:385251132543:certificate/44d3cf20-aca4-4d10-a458-023ac1fcec4a
  DomainName:
    Type: String
    Description: The website domain name.
    Default: summit.docaas.com

Resources:
  #S3 Bucket
  TheBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration: 
          -
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Domain
          Value: !Ref DomainName

  TheBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref TheBucket
      PolicyDocument:
        Statement:
          -
            Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Join [ "", [ "arn:aws:s3:::", !Ref TheBucket, "/*" ] ]
            Principal:
              CanonicalUser: !GetAtt TheCloudFrontOriginAccessIdentity.S3CanonicalUserId

  #CLOUDFRONT
  TheCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref DomainName
          # - !Join [ "", [ "*.", !Ref DomainName ] ]
        DefaultCacheBehavior:
          Compress: true
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
          TargetOriginId: the-s3-bucket
          ViewerProtocolPolicy: redirect-to-https
          DefaultTTL: 0
          MaxTTL: 0
          MinTTL: 0
        DefaultRootObject: index.html
        CustomErrorResponses:
          - ErrorCachingMinTTL: 300
            ErrorCode: 403
            ResponseCode: 404
            ResponsePagePath: /404.html
        Enabled: true
        HttpVersion: http2
        Origins:
          - DomainName:
              !Join [ "", [ !Ref TheBucket, ".s3.amazonaws.com" ] ]
            Id: the-s3-bucket
            S3OriginConfig:
              OriginAccessIdentity:
                !Join [ "", [ "origin-access-identity/cloudfront/", !Ref TheCloudFrontOriginAccessIdentity ] ]
        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: !Ref AcmCertificateArn
          SslSupportMethod: sni-only
      Tags:
        - Key: Domain
          Value: !Ref DomainName

  TheCloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'CloudFront OAI for ${DomainName}'

  #COGNITO
  # Creates a role that allows Cognito to send SNS messages
  SNSRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Service: 
                - "cognito-idp.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "CognitoSNSPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action: "sns:publish"
                Resource: "*"

  # Creates a user pool in cognito for your app to auth against
  UserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: !Sub ${AuthName}-user-pool
      AutoVerifiedAttributes:
        - email
      MfaConfiguration: "OFF"
      SmsConfiguration:
        ExternalId: !Sub ${AuthName}-external
        SnsCallerArn: !GetAtt SNSRole.Arn
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: plan
          AttributeDataType: String
          Mutable: true
  
  # Creates a User Pool Client to be used by the identity pool
  UserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: !Sub ${AuthName}-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool
  
  # Creates a federeated Identity pool
  IdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: !Sub ${AuthName}Identity
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders: 
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  # Create a role for unauthorized acces to AWS resources. Very limited access. Only allows users in the previously created Identity Pool
  CognitoUnAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: "CognitoUnauthorizedPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                Resource: "*"

  # Create a role for authorized acces to AWS resources. Control what your user can access. This example only allows Lambda invokation
  # Only allows users in the previously created Identity Pool
  CognitoAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: "CognitoAuthorizedPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
  
  # Assigns the roles to the Identity Pool
  IdentityPoolRoleMapping:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthorizedRole.Arn
        unauthenticated: !GetAtt CognitoUnAuthorizedRole.Arn
  
  #LAMBDAS
  RoleForLambdas:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
          - Effect: "Allow"
            Principal: 
              Service: "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole

  DeckDataAccessFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Runtime: nodejs8.10
      Handler: deck-da.deck_data_access
      FunctionName: DOCAAS_DeckDataAccess
      Role: !GetAtt RoleForLambdas.Arn
  GameDataAccessFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Runtime: nodejs8.10
      Handler: game-da.game_data_access
      FunctionName: DOCAAS_GameDataAccess
      Role: !GetAtt RoleForLambdas.Arn
  CreateDeckFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Runtime: nodejs8.10
      Handler: create.create_deck_handler
      FunctionName: DOCAAS_CreateDeck
      Role: !GetAtt RoleForLambdas.Arn
  GetDeckFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Runtime: nodejs8.10
      Handler: get.get_deck_handler
      FunctionName: DOCAAS_GetDeck
      Role: !GetAtt RoleForLambdas.Arn
  ShuffleDeckFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Runtime: nodejs8.10
      Handler: shuffle.shuffle_deck_handler
      FunctionName: DOCAAS_ShuffleDeck
      Role: !GetAtt RoleForLambdas.Arn
  CutDeckFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Runtime: nodejs8.10
      Handler: cut.cut_deck_handler
      FunctionName: DOCAAS_CutDeck
      Role: !GetAtt RoleForLambdas.Arn
  GameFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Runtime: nodejs8.10
      Handler: game.demo_game_handler
      FunctionName: DOCAAS_Game
      Role: !GetAtt RoleForLambdas.Arn
  AuthoriserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Runtime: nodejs8.10
      Handler: authoriser.authorise_request
      FunctionName: DOCAAS_Authoriser
      Role: !GetAtt RoleForLambdas.Arn
      Environment:
        Variables:
          IDENTITY_POOL_ID: !Ref IdentityPool
  CorsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Runtime: nodejs8.10
      Handler: cors.handle_request
      FunctionName: DOCAAS_Cors
      Role: !GetAtt RoleForLambdas.Arn

  #API GATEWAY
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: docaas-api

  PlanAuthorizer: 
    Type: AWS::ApiGateway::Authorizer
    Properties: 
      AuthorizerCredentials: !GetAtt RoleForLambdas.Arn
      AuthorizerResultTtlInSeconds: 60
      AuthorizerUri: 
        Fn::Join: 
          - ""
          - 
            - "arn:aws:apigateway:"
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - Fn::GetAtt: 
              - "AuthoriserFunction"
              - "Arn"
            - "/invocations"
      Type: TOKEN
      IdentitySource: method.request.header.Authorization
      Name: DocaasPlanAuthoriser
      RestApiId: !Ref RestApi

  AuthoriserInvokeLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "AuthoriserFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*"

  ApiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "GetDeckApiMethod"
    Properties:
      RestApiId: !Ref "RestApi"
      StageName: Prod

  InvokeCorsLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "CorsFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*"

  # API GATEWAY RESOURCES
  GetDeckApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: get
      RestApiId: !Ref RestApi
  GetDeckApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref PlanAuthorizer
      ResourceId: !Ref GetDeckApiResource
      RestApiId: !Ref RestApi
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "GetDeckFunction.Arn"
  GetDeckInvokeLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "GetDeckFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/get"
  GetDeckOptionsApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ResourceId: !Ref GetDeckApiResource
      RestApiId: !Ref RestApi
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "CorsFunction.Arn"

  CreateDeckApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: create
      RestApiId: !Ref RestApi
  CreateDeckApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref PlanAuthorizer
      ResourceId: !Ref CreateDeckApiResource
      RestApiId: !Ref RestApi
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "CreateDeckFunction.Arn"
  CreateDeckInvokeLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "CreateDeckFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/create"
  CreateDeckOptionsApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ResourceId: !Ref CreateDeckApiResource
      RestApiId: !Ref RestApi
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "CorsFunction.Arn"

  ShuffleDeckApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: shuffle
      RestApiId: !Ref RestApi
  ShuffleDeckApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref PlanAuthorizer
      ResourceId: !Ref ShuffleDeckApiResource
      RestApiId: !Ref RestApi
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "ShuffleDeckFunction.Arn"
  ShuffleDeckInvokeLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "ShuffleDeckFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/shuffle"
  ShuffleDeckOptionsApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ResourceId: !Ref ShuffleDeckApiResource
      RestApiId: !Ref RestApi
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "CorsFunction.Arn"

  CutDeckApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: cut
      RestApiId: !Ref RestApi
  CutDeckApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref PlanAuthorizer
      ResourceId: !Ref CutDeckApiResource
      RestApiId: !Ref RestApi
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "CutDeckFunction.Arn"
  CutDeckInvokeLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "CutDeckFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/cut"
  CutDeckOptionsApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ResourceId: !Ref CutDeckApiResource
      RestApiId: !Ref RestApi
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "CorsFunction.Arn"
  
  GameApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: game
      RestApiId: !Ref RestApi
  GameApiApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref PlanAuthorizer
      ResourceId: !Ref GameApiResource
      RestApiId: !Ref RestApi
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "GameFunction.Arn"
  GameInvokeLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "GameFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/game"
  GameOptionsApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ResourceId: !Ref GameApiResource
      RestApiId: !Ref RestApi
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "CorsFunction.Arn"

  # DYNAMODB
  DynamoDecksTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: decks-master
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 50
        WriteCapacityUnits: 50
      SSESpecification:
        SSEEnabled: true

  DynamoGamesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: games-master
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 50
        WriteCapacityUnits: 50
      SSESpecification:
        SSEEnabled: true

Outputs:
  APIBaseURL:
    Value: !Sub "${RestApi}"
  UserPoolId:
    Value: !Ref UserPool
    Export:
      Name: "UserPool::Id"
  UserPoolClientId:
    Value: !Ref UserPoolClient
    Export:
      Name: "UserPoolClient::Id"
  IdentityPoolId:
    Value: !Ref IdentityPool
    Export:
      Name: "IdentityPool::Id"
  TheBucket:
    Value: !Ref TheBucket
    Export:
      Name: "TheBucket::Id"
  CloudfrontEndpoint:
    Value: !GetAtt [TheCloudFrontDistribution, DomainName]
    Description: Endpoint for Cloudfront distribution
  TheCloudFrontOriginAccessIdentity:
    Value: !Ref  TheCloudFrontOriginAccessIdentity
    Description: The CloudFront Origin Access Identity 

